#summary How to use cppao

= Introduction =

Active objects (AOs) are an established concurrent programming technique where objects communicate via messages rather than by direct method calls. This makes active objects thread-safe because they can only process one message at a time, whilst at the same time different AOs can run on different CPU cores and are guaranteed not to interfere with each other.

C++ Active Objects (cppao) is a small library to make it simple to implement active objects in C++.

= Getting started =

See the [BuildInstructions build instructions] on how to download and install the cppao library.

= Hello active! =
The first example is
[http://code.google.com/p/cppao/source/browse/trunk/samples/hello_active.cpp hello_active.cpp]
{{{
#include <active/object.hpp>
#include <iostream>

class HelloActive : public active::object
{
public:
        struct Greet { const char * message; };
        
        ACTIVE_METHOD( Greet )
        {
                std::cout << Greet.message << std::endl;
        }
};

int main()
{
        HelloActive hello;
        HelloActive::Greet message = { "Hello, world!" };
        hello(message);
        active::run();
}
}}}

Since this is the first example, let's go through it line by line:

{{{
#include <active/object.hpp>
}}}

This includes the header file, you need to do this.

{{{
#include <iostream>
}}}

This includes a system header file, which we'll need to output text.

{{{
class HelloActive : public active::object
}}}

This line defines a new class. All active object classes inherit from `active::object`, or `active::shared<>` (more on `active::shared<>` later)...

{{{
        struct Greet { const char * message; };
}}}

Defines a new message which we can send to our active object. A message can be any data type.

{{{
        ACTIVE_METHOD( Greet )
}}}

Defines a new active method (=message handler). This active method handles messages of type `Greet`.

{{{
        {
                std::cout << Greet.message << std::endl;
        }
}}}

Implements our message handler, which just displays the text. Note that the variable name of the message is also its typename.

{{{
        HelloActive hello;
}}}

Create a new active object of type `HelloActive`.

{{{
        HelloActive::Greet message = { "Hello, world!" };
}}}

Create a new message to send to the object.

{{{
        hello(message);
}}}

Pass the message to the object. The object will receive the message at some point in the future, and in fact will just sit in the message queue of the object until it is run. Messages are *moved* into the message queue and cannot be reused.

{{{
        active::run();
}}}

Runs all active objects in a thread pool until there are no more messages.

= Ping pong! =

Our next example is almost as simple as the first:
[http://code.google.com/p/cppao/source/browse/trunk/samples/ping_pong.cpp ping_pong.cpp]
This just shows how active objects can implement several different messages.

= Round Robin =

This example [http://code.google.com/p/cppao/source/browse/trunk/samples/round_robin.cpp round_robin.cpp] shows how multiple objects can interact. Here we have 1000 instances of the same class. We don't run the `RoundRobin::run()` method in 1000 different threads (though I guess we could), but instead we call the function `active::run()` which runs all of our objects in a thread pool. This is generally more efficient than creating one OS thread per active object.

{{{
#include <active/object.hpp>
#include <iostream>

struct RoundRobin : public active::object
{
        typedef int packet;
        
        RoundRobin * next;
        
        ACTIVE_METHOD( packet )
        {
                printf("Received packet %d\n", packet);
                if( packet>0 ) (*next)(packet-1);
        }
};

int main()
{       
        // Create 1000 nodes.
        const int Count=1000;
        RoundRobin nodes[Count];
        
        // Link them together
        for(int i=0; i<Count-1; ++i) nodes[i].next = nodes+i+1;
        nodes[Count-1].next=nodes;
        
        // Send each node a packet.
        for(int i=0; i<Count; ++i) nodes[i](10);
                
        // Run all objects using all available cores.
        active::run();
}
}}}

= Returning results =

The biggest conceptual difficulty with active objects is actually designing your application. Because active methods are fire-and-forget, you can't return a result from them. Instead of _returning_ results, we should instead think about _forwarding_ results. You must design your application like a message-processing pipeline, where active objects are interlinked, and pass messages between each other.

So to ask how results are returned is to ask the wrong question. The question is really, how to interconnect objects?

The basic method of interconnection is shown in [http://code.google.com/p/cppao/source/browse/trunk/samples/forward_result.cpp forward_result.cpp], where one AO passes the result to another as specified in the message itself. The tiny problem with this example is that the `ComplexComputation` class is bound to the `ComputationHandler` class. Ideally we would like to decouple the sender from the recipient, and this is achievable through pure virtual base classes. We can use `ACTIVE_IFACE` or `active::sink<>` to define an interface through which AOs communicate, as illustrated in [http://code.google.com/p/cppao/source/browse/trunk/samples/forward_result_iface.cpp forward_result_iface.cpp] and [http://code.google.com/p/cppao/source/browse/trunk/samples/forward_result_sink.cpp forward_result_sink.cpp].

In this example, we implement a computation in the class `ComplexComputation`, which then forward its result to an object of type `active::sink<>`. The recipient is specified in the `ComplexComputation::computation` message itself.
{{{
#include <active/object.hpp>
#include <iostream>

class ComplexComputation : public active::object
{
public:
        struct computation
        {
                int a, b;
                active::sink<int> & handler;
        };
        
        ACTIVE_METHOD( computation ) const;      // Look we can even have const active methods
};

class ComputationHandler : public active::object, public active::sink<int>
{
public:
        typedef int result;
        
        ACTIVE_METHOD( result ) const
        {
                std::cout << "Result of computation = " << result << std::endl;
        }
};

void ComplexComputation::ACTIVE_IMPL( computation ) const
{
        computation.handler(computation.a + computation.b);
}

int main()
{
        ComputationHandler handler;
        ComplexComputation cc;
        ComplexComputation::computation comp = { 1,2,handler };
        cc(comp);
        active::run();
}
}}}
The recipient of the result is implemented in class `ComputationHandler`, which implements the `ACTIVE_METHOD` to handle the result. In this way, the computation and the handler are completely decoupled.

Also observe that we can implement active methods outside of the class (thankfully), using the `ACTIVE_IMPL` macro, and we can even make active methods const.

Finally, because the literature says we must, we can also put results into _promise_, as shown in [http://code.google.com/p/cppao/source/browse/trunk/samples/future.cpp future.cpp]. The `active::promise<>` class is an active object which can also be accessed from synchronous code. Personally I would design the entire application using active objects so as to not mix paradigms.

= Exception handling =

In the same way that return values can't be delivered to the point of calling, so exceptions can't be propagated to the caller either. So where to deliver the exception? 

Instead they are delivered to the `exception_handler()` method (which is not an active method), which can rethrow, catch and handle the exception. If `exception_handler()` emits an exception, then the application terminates. 

Of course, if an active method wants to do something different, then it must implement `try...catch` itself.

= Using shared pointers =

The examples so far have relied on raw C-style pointers, mainly for simplicity. This has the obvious drawback that you might end up with dangling pointers, or that objects are destroyed whilst there are still messages on their queue.

You could also use references but the same problem arises.

To solve this, the class `active::shared<>` can be used as a base class for your AO, which will then safely enqueue messages to the shared object, and be guaranteed that the object will only be destroyed after all messages have been processed.

The sample [http://code.google.com/p/cppao/source/browse/trunk/samples/object_types.cpp object_types.cpp] demonstrates this.

{{{
#include <active/shared.hpp>

struct shared_object : public active::shared<shared_object>
{
        ACTIVE_METHOD(greeting) { std::cout << "Shared object says " << greeting << std::endl; }
};
}}}

= Object types =

There are actually a number of base classes you could choose for your active objects, each with different characteristics.

|| Base class || Header file || Description ||
|| `active::object` || `active/object.hpp` || The basic, non-blocking AO. ||
|| `active::shared<>` || `active/shared.hpp` || Prevents premature object destruction using smart pointers, `std::shared_ptr<>`. ||
|| `active::fast` || `active/fast.hpp` || Processes the message in the calling thread if the object is idle. This is often faster but can fail to exploit the hardware fully. ||
|| `active::thread` || `active/thread.hpp` || Dedicates an OS thread to this AO. ||
|| `active::advanced` || `active/advanced.hpp` || A more feature-rich AO which supports message prioritization, query queue size, clear queue and limit queue size. ||
|| `active::synchronous` || `active/synchronous.hpp` || Always processes message in the calling thread, but guarded by a mutex. Not a true AO. ||
|| `active::direct` || `active/direct.hpp` || An unguarded AO which is not thread-safe but can be used if the class is entirely thread-safe or has no mutable state. ||

See FineTuning for further details, and the sample [http://code.google.com/p/cppao/source/browse/trunk/samples/object_types.cpp object_types.cpp] shows off the different implementations.

= Staying safe =
Active objects guarantee that your program will be thread-safe, if you follow these guidelines: 

  * Communicate only via messages:
    * Make all mutable class-members private.
    * Make all non-active methods private.
  * Ensure messages are thread-safe:
    * Restrict messages to value-types and pointers to AOs.
    * Use move semantics (`std::move()` etc.) when passing large arrays between objects.
    * Avoid (shared) pointers to anything else, unless they are `unique()`.
    * Avoid weak pointers in messages, as they aren't needed.
  * Avoid dangling pointers; cppao can't help you here, but try shared pointers.
  * Avoid blocking calls (e.g. network, `std::future<>::get()`), unless using `active::thread`.

Deadlock cannot occur; what happens is that your program runs out of messages and exits. 

If you break these guidelines, then your code may well still be correct, but you will forever have the worry that it may not be....

= Where next? =
Now you have the tools, it is time to apply them! Check out the [Samples] and the [Reference]. You can also read FineTuning if you want to compose your own AO.