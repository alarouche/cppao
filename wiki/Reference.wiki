#summary Detailed description of cppao

= Header files=
|| Header file || Description || Definitions ||
|| `active/advanced.hpp` || Implements a more sophisticated AO type || [#active::advanced advanced] ||
|| `active/direct.hpp` || Non-mutexed objects. || [#active::direct direct] ||
|| `active/fast.hpp` || || [#active::fast fast] ||
|| `active/object.hpp` || The main include file, which includes all of the basics. || [#active::basic basic], [#active::default_scheduler default_scheduler], [#active::object object], [#active::priority priority], [#active::run run], [#active::sink sink] ||
|| `active/promise.hpp` || || [#active::promise promise] ||
|| `active/scheduler.hpp` || || [#active::scheduler scheduler] ||
|| `active/shared.hpp` || Additional support for shared pointers. || [#active::shared shared] ||
|| `active/synchronous.hpp` || || [#active::synchronous synchronous] ||
|| `active/thread.hpp` || Running AOs in a dedicated OS thread. || [#active::thread thread] ||

= Namespace =
All declarations are in the namespace `active`.

= Classes =
== active::basic ==
{{{
typedef ... basic;
}}}
Provides the default implementation for active objects. This object is scheduled by the cppao scheduler (`active::scheduler`).

== active::object ==

{{{
template<typename Derived, typename Type=basic>
struct object
{
    typedef Derived derived_type;

    object();

    template<typename...Args>
    derived_type & operator()(Args ... args );

    template<typename...Args>
    derived_type & operator()(Args ... args ) const;

    template<typename Fn>
    void active_fn(Fn && fn, int priority=0) const;
};
}}}

The base class for user active object types.

== active::shared == 
{{{
template<typename Derived, typename Type=basic>
struct shared
{
    ...
    typedef std::shared_ptr<Derived> ptr;
    ptr shared_from_this();
};
}}}

This implements the base class for shared active objects.

== active::fast ==
{{{
typedef ... fast;
}}}

== active::thread ==
{{{
typedef ... thread;
}}}

== active::synchronous ==
{{{
typedef ... synchronous;
}}}

== active::direct ==
{{{
typedef ... direct;
}}}

== active::advanced ==
{{{
typedef ... advanced;
}}}

Additional methods of this class:

|| size_type size() const || Returns the number of messages waiting.||
|| void clear () || Removes all pending messages. Protected method only callable from active methods. ||
|| void set_capacity(size_type) || Sets the new capacity (maximum number of queued messages. Attempts to exceed the capacity result in the exception `std::bad_alloc` || 

In addition there is the function

== active::priority ==
{{{
namespace active
{
    template<typename T> int priority(const T&)
    {
        return 0;
    }
}
}}}

which can be used to assign a priority to any message type (which may or may not depend on the contents as well as the type of the message). Note that the default priority is 0.

== active::separate ==
{{{
    typedef object_impl<...> separate;
}}}
A different implementation, similar to `active::object`.

== active::scheduler ==
Schedules the message processing on a collection of active objects.
{{{
class scheduler;
}}}

Methods:

|| `scheduler()` || ||
|| `scheduler(const scheduler&) = delete` || ||
|| `scheduler& operator=(const scheduler&) = delete` || ||
|| `~scheduler()` || Must not be called during `run()`. ||
|| `void run()` || Runs the scheduler in a single thread. Can be called concurrently from multiple threads. ||
|| `void run(int threads)` || Runs the scheduler using the specified number of threads. Must not be called concurrently from multiple threads. ||
|| bool run_one() || Runs one AO, returns true if there is more work to do. ||

== active::run ==
Runs a scheduler in a thread pool. Note that this class is often used as a function.
{{{
class run;
}}}

Methods:

|| `run(int num_threads=std::thread::hardware_concurrency(), scheduler & sched=default_scheduler)` || Starts the thread pool and starts processing messages. ||
|| `~run()` || Waits for all messages to be processed and stops the thread pool. ||

== active::sink ==
{{{
template<typename T>
struct sink
{
    ACTIVE_IFACE(T);
    typedef std::shared_ptr<T> sp;
};
}}}
Provides a pure virtual base class for accepting messages.

== active::promise ==
Provides a promise/future mechanism for returning results from AOs.
{{{
template<typename T> class promise : public direct, public sink<T>
{
    ...
};
}}}

Typenames:
|| value_type || T ||

Methods:
|| `promise()` || Default constructor. ||
|| `T get()` || Blocking call to retrieve the value. ||  

= Global variables =
== active::default_scheduler ==
{{{
extern scheduler default_scheduler;
}}}
The global scheduler, used by objects by default unless overridden by `object_impl::set_scheduler()`. Global variables are of course to be discouraged, and are only provided for convenience.

= Functions =

== active::priority ==
{{{
namespace active
{
    template<typename T> int priority(const T&)
    {
        return 0;
    }
}
}}}
Used to prioritize calls to the `advanced` object type, but is ignored for all other object types.

== active::wait ==